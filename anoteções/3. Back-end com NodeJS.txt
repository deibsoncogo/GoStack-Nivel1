Nível 01

------> 3. Back-end com NodeJS
Nesse módulo iremos conhecer os primeiros conceitos do Node.js e aplicá-los na
construção da nossa primeira aplicação backend

----> 1. Back-end com NodeJS
--> Conceitos NodeJS
O Node.JS permite usar JavaScript com a metodologia de backend e fontend
  Backend é tudo que o cliente não enxerga
  Frontend é tudo aquilo que é visivel pelo usuário

Ele é construído encima do V8 que é a maquina que roda o Chrome
O NPM e o Yarn são programas que disponibiliza a utilização de bibliotecas no programas
Mais o Yarn está se desenvolvendo mais rápido assim se tornando melhor que o NPM
O Node possui a arquitetura chamada de Event-loop que é uma cadeia de eventos
Ele funciona baseando-se de eventos (Call Stack) e possui um formato de uma pilha
que quer dizer que o último evento recebido será o primeiro a ser executado

Ele também é single-thread onde isso quer dizer que ele executa em somente um thread no processador
Outro ponto importante dele é que também possui Non-blocking I/O com isso quando o cliente
faz uma requisição não precisamos retornar todos os dados sem perder a conexão

O frameworks que mais utilizaremos é o ExpressJS pois ele não tem uma opinião (Estrutura aberta)
Ótimo para iniciar pois ele possui micro framework que possui poucas funcionalidades que executam seus deveres com perfeição
É muito utilizado em micro serviços como a divisão do código em grupos
Outros frameworks mais utilizado mas opinados é o AdonisJS e o NestJS

--> Conceitos API REST
Uma API funciona a partir de uma requisição de um cliente, a resposta retorna através
de uma estrutura de dados e o cliente recebe a resposta e processa o resultado

As rotas utilizam métodos HTTP para fazer alguma coisa com as informações como:
  GET: Busca
  POST: Criar
  PUT: Alterar
  DELETE: Deletar

O endereço de um site possui nomes como (GET http://api.com/1/users?page=2):
  Método: GET http://api.com/
  Route: company/
  Route params: 1/
  Route: users
  Query params: ?page=2

A estrutura de dados utilizada se chama JavaScript Object Notation (JSON) como podemos ver abaixo na imagem
Os Query Params são visíveis na URL do site onde para a autenticação de algo isso é rui,
pois, a senha vai ficar exposta, para evitar isso usamos os métodos Body, todos os comandos
retornar um HTTP code que é o conjunto de um número com 3 dígitos, eles são classificados
em cinco grupos como:
  1XX - Informacional
  2XX - Sucesso
  3XX - Redirecionamento
  4XX - Erro do cliente
  5XX - Erro do servidor

--> Criando projeto Node
Para criar um programa com o arquivo essencial utilizamos o comando abaixo
  yarn init -y

A pasta src serve para falar que contem arquivos criados pelo programador
Para instalar algums dependência com o Yarn utilizamos este comando
  yarn add NOME-DA-DEPENDÊNCIA

Para instalar o Express utilizamos exatamente este comando
  yarn add express

Para acessar um programa em desenvolvendo costumamos o seguinte endereço e porta
  http://localhost:3333

Um json deve sempre ser retornado como uma array ou objeto

--> Configurando Nodemon
O Nodemon atualiza o servidor assim que algum arquivo for salvo
Para instalar ele como versão de desenvolvimento adicionamos -D
  yarn add nodemon -D

Ao definir algo como desenvolvimento falamos que no projeto final este
programa não será nescessário para o funcionamento

Para executar o programa utilizamos o comando abaixo
  yarn nodemon CAMINHO-DO-ARQUIVO-MAIN.EXTENSAO
  yarn nodemon src/index.js

Para evitar de ter que infromar o caminho do arquivo main podemos configurar
o arquivo main no packge.json, assim podemos executar somente o nodemon
  yarn nodemon

O Visual Studio Code permite criar atalhos (Scripts) no arquivo packge.json
Criamos um atalho para executar o Nodemon
  yarn dev

--> Métodos HTTP
  GET: Buscar alguma informação
  POST: Criar alguma informação
  PUT: Alterar várias informações
  PATCH: Alterar uma informação
  DELETE: Deletar alguma informação

--> Utilizando o Insomnia
Com o Insomnia conseguimos verificar todos métodos de HTTP
Ele é de código aberto, utilizando o JavaScript para sua criação e tambem
utiliza o Electon por baixo dos panos e funciona somente com 64 bits

Para os computadores de 32 bits temos o Postman
A instalação dele é por um instalador mesmo e utilizo o tema Dracula onde
para instalar o tema abra preferencias, plugins e show plugins folder
depois cole o tema dentro da pasta plugins
clique no botão para atualisar o plugin e ative o tema em themes

Ele permite a criar de variável como valor padrão clicando em environments

--> Tipos de Parâmetros
Existe três tipos onde eles são formas do servidor coletar os devolver alguma informação
  Query params: É mais utilizado para filtragens ou paginação, é usado somente com o get
  Route params: Identificar recursos no momento de atualizar ou deletar
  Requesto body: Conteúdo na hora criar ou editar um recurso como uma ficha de cadastro (JSON)

--> Aplicação funciona
Para criar um ID automaticamente podemos utilizar o UUIDV4
  yarn add uuidv4
