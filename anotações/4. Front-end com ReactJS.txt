Rocketseat Bootcamp GoStack - Nível 1

------> 4. Front-end com ReactJS
Agora continuaremos na nossa jornada, conhecendo os primeiros conceitos do ReactJS
Desenvolveremos a nossa primeira aplicação web e vamos conecta-la no backend que
criamos no último módulo

----> 1. Front-end com ReactJS
--> Conceitos ReactJS
React é uma biblioteca para construção de interfaces, ele pode ser chamado de framework
Tudo que o usuário enxerga pode ser criado por ele
Também é utilizado para a construção de Single-Page
Tudo que utilizarmos fica dentro do JavaScript
  React: Se refere somente a sua biblioteca
  ReactJS: É o comportamento do programa com o navegador
  React Native: É combinação do React normal com outro programa nativo

Uma das vantagens dele é a organização do código utilizando a componentização que é
a divisão dos itens da tela onde se removermos um item os demais iram funcionar

A divisão de responsabilidade é a criação do backend para as regras de negócio e frontend
para a interface do usuário, isso facilita a criação de uma API para varias plataformas

A programação declarativa (Falamos qual resultado queremos) é melhor que a imperativa
(O programador precisa dizer cada passo do que fazer)

O JSX permite escreve HTML dentro de um programa com JavaScript

O browser não entende todo esse código com isso usamos o Babel e o Webpack
O Babel converte o código JS de uma forma que o browser entenda
O Webpack cria o bundle (Arquivo com todo código da aplicação), ensina ao JavaScript
como improtar arquivos (CSS, imagens e outros), realiza live reload com o
Webpack Dev Serve (Atualiza o programa)

--> Configurando Babel
Utilizamos o comando abaixo para criar a base do programa
  yarn init -y

Para iniciar a programação vamos precisar instalar as dependencias abaixos onde
precisamos dele do ReactDom para pode configurar a arvore de elemento
  yarn add react react-dom

Para criar a base de html usamos o comando abaixo
  html:5

O Babel vai converter (Transpilar) o código do React para um código que o browser entenda
O Webpack vai converter os arquivos de formatos diferentes de formas diferentes
Com isso existe os loaders para cada tipo de arquivo
Utilizamos os comandos abaixo para realizar a instalação dos tipos de Babel e Webpack
  yarn add @babel/core @babel/preset-env @babel/preset-react webpack webpack-cli @babel/cli

Para realizar configurações do Babel precisamos criar um arquivo chamado assim
  babel.config.js

Temos o site abaixo que mostra todos tipos de configuração
  https://babeljs.io/docs/en/configuration#babelconfigjson

Para executar a converção podemos usar o seguinte comando informando o nome
do arquivo a ser convertido e onde deve ser criado
  yarn babel src/index.js --out-file public/bundle.js

--> Configurando Webpack
Para realizar configurações do Webpack precisaremos do arquivo abaixo
  webpack.config.js

Precisamos tambem instalar a dependencia abaixo
  yarn add babel-loader

Comando para executar a conversão dos arquivos com o Webpack
  yarn webpack --node development

A dependencia abaixo serve para atualizar o servidor ao alterar algum arquivo
  yarn add webpack-dev-server -D

Para iniciar o servidor de atualizarção automatica usamos o comando abaixo
  yarn webpack-dev-server --mode development

--> Componentização
Componentização é o pode de conseguir dividir algo onde com isso podemos repetir
um cabeçalho para ficar igual a topas páginas ou remover algo sem prejudicar outra coisa

Existe um padrão de utilizar a primeira letra em maiúscula nos arquivos de componente
pois assim identificamos com facilidade todos componentes

O código é uma função que retornar HTML e sempre teremos que importar o react e exportar
Para utilizar mais de um comando precisa criar um “grupo”, colocar um comando HTML
entre eles, existe o método normal e o fragment lembrando que o método normal
separa o código da função que ele está
  Normal: <div><div/>
  Fragment: <></>

--> Propriedades
Ela é algo que informamos dentro de um comando HTML difernciando
Para utilizar um comando Java dentro do HTML utilize parênteses
Para chamar todos tipos de propriedades usamos o comando abaixo
  props

--> Estado e Imutabilidade
Devemos usar alguma palavra como handle para saber que aquela função ou classe será
executado somente pelo usuário e não pelo sistema

Imutabilidade é quando criamos novamente as informações invés de substituir elas

--> Importando CSS e imagens
Para executar esta aula serão necessárias as seguintes dependencias
  yarn add style-loader css-loader

Comando para executar a API para teste (Atallho: dev)
  webpack-dev-server --mode development

Comando para executar a API como final (Atalho: build)
  webpack --node production

Para poder carregar arquivos dentro do programa utilizar o File Loader
  yarn add file-loader

Toda vez que realizarmos uma alterações no webpack devemos reiniciar o servidor

--> Listando Projetos da API
Para criar a conexão do frontend com o backend usamos a dependencia abaixo
  yarn add axios

O useEffect serve para disparar funções

A dependencia abaixo ser como uma ferramenta de segurança para o backend
expecifindo quais frontend podem enviar requisições para ele
  yarn add cors

--> Cadastrando projetos
Permite a utilização dos comandos async e await
  yarn add @babel/plugin-transform-runtime
